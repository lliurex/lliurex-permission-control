#! /usr/bin/python3

"""
    N4D Client

    N4D client cli

    Copyright (C) 2021  Daniel Duran Vecino <daduve@gmail.com>

    This program is free software: you can redistribute it and/or modify it under
    the terms of the GNU General Public License as published by the Free Software
    Foundation, either version 3 of the License, or (at your option) any later
    version.

    This program is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along with
    this program. If not, see <http://www.gnu.org/licenses/>.
"""

import os
import sys
import getpass
import time
import argparse
import json
import tempfile
import shutil

cdc_dir_orig="/usr/share/cdc-mapper/groups/"
cdc_dir_modify="/etc/cdc-mapper/groups/"
temp_file=tempfile.NamedTemporaryFile(mode="w",suffix=".py",prefix="TMP_CDC_")
tmp_file=temp_file.name


def dprint(txt):
    try:
        DEBUG=False
        if DEBUG:
            print(txt)
    except Exception as e:
        print('[dprint] Error %s'%e)        
#def_dprint


def dir_exists (dir):
    try:
        dprint("dir_exists start")
        if not os.path.exists(dir):
            os.makedirs(dir)
        return True
    except Exception as e:
        return False        
#def_dir_exists



def json_status(file):
    try:
        dprint("Json_status start")
        solved=editable=alu=doc=adm=False
        dprint('Opening json file:%s'%file)
        with open(file, 'r+') as fjson:
            data=json.load(fjson)
        alu=data['alu']
        doc=data['doc']
        adm=data['adm']
        editable=data['editable']
        solved=True
        dprint("Json_status[Solved:%s, Editable:%s, Alu:%s, Doc:%s, Adm:%s]"%(solved,editable,alu,doc,adm))
        return [solved,editable,alu,doc,adm]
    except Exception as e:
        print('[json_status] Json file: %s has an error %s'%(file,e))
        return [False, False,False,False,False]
#def_jsonstatus


def cdc_status_dir(dir_json,sgroup):
    try:
        dprint("cdc_status_dir start")
        sgroup_status=[False,False,False,False,False]
        file_extend=False
        if dir_exists(dir_json):
            for file in os.listdir(r'%s'%dir_json):
                if sgroup in file:
                    if file.endswith(".json"):
                        file_extend=dir_json+file
                        sgroup_status=json_status(file_extend)
        dprint("cdc_status_dir Appending file %s"%file_extend)
        sgroup_status.append(str(file_extend))
        return sgroup_status
    except Exception as e:
        print('[cdc_status_dir] Error %s'%e)
        sys.exit(1)
 # def_cdc_status_dir


def cdc_status(sgroup):
    try:
        dprint("cdc_status start")
        cdc_status_dir_solved=cdc_status_dir(cdc_dir_modify,sgroup)
        if cdc_status_dir_solved[0]:
                pass
        else:
            cdc_status_dir_solved=cdc_status_dir(cdc_dir_orig,sgroup)
            if cdc_status_dir_solved[0]:
                pass
        dprint("cdc_status ended")
        dprint(cdc_status_dir_solved)
        return cdc_status_dir_solved
    except Exception as e:
        print('[cdc_status] Error %s'%e)
        sys.exit(1)
 # def_cdc_status


def json_modify(file,user,enable):
    try:
        dprint("json_modify start")
        dprint("file:%s"%file)
        json_file=file
        with open(json_file, 'r+') as filejson:
            my_data = json.load(filejson)
        dprint("Json data: %s"%my_data)
        dprint('User:%s - Enable:%s'%(user,enable))
        dprint(my_data[user])
        if my_data[user]==enable:
            dprint("Don't nothing.... value is ok")
            return False
        else:
            #Copy json file to modify files if it necessary
            if cdc_dir_orig in file:
                #copy orig file in modified directory
                dprint('Modify file....shutilcopy')
                shutil.copy(file,cdc_dir_modify)
                njson_file=cdc_dir_modify+os.path.basename(file)
            else:
                njson_file=file
            with open(njson_file, 'r+') as filejson:
                my_data = json.load(filejson)
            my_data[user]=enable  
            with open(njson_file, 'w') as filejson:
                json.dump(my_data, filejson)
            return True
    except Exception as e:
        print('[json_modify] Error %s'%e)
        sys.exit(1)
#def_json_modify




def main():
    
    parser = argparse.ArgumentParser(description='Get information about running environment')
    parser.add_argument("-u", "--users",metavar='users',choices=['alu','doc','adm'],help="Select the group alu or doc")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-e", "--enable",metavar='group',choices=['docker'],help="Enable a group in the system when the user is logging in")
    group.add_argument("-d", "--disable",metavar='group',choices=['docker'],help="Disable a group in the system when the user is logging in")
    group.add_argument("-s", "--status",metavar='group',help="Show the status for this group")
    group.add_argument("-l", "--list", action='store_true',help="Show the groups that can be modified")

    args = parser.parse_args()

    try:
        #print(args.enable, args.disable, args.status, args.users, args.list)

        if (args.enable == None and args.disable == None and args.status == None and args.list == None):
            #print('Deberia mostrarse la ayuda')
            parser.print_help()
            sys.exit(1)

        if args.status != None:
            #cdc_status returs [solved,editable,alu,doc,adm,json_file]
            cdc_status_solved=cdc_status(args.status)
            dprint("cdc_status_solved=%s"%cdc_status_solved)
            if cdc_status_solved[0]:
                if args.users=='alu':
                    print ("%s['alu']:%s "%(args.status,cdc_status_solved[2]))
                    sys.exit(0)
                if args.users=='doc':
                    print ("%s['doc']:%s "%(args.status,cdc_status_solved[3]))
                    sys.exit(0)
                if args.users=='adm':
                    print ("%s['adm']:%s "%(args.status,cdc_status_solved[4]))
                    sys.exit(0)
            else:
                print ('%s group is not defined'%args.status)
                sys.exit(0)
            print ("%s['alu']:%s - %s['doc']:%s - %s['adm']:%s"%(args.status,cdc_status_solved[2],args.status,cdc_status_solved[3],args.status,cdc_status_solved[4]))
            sys.exit(0)


        if args.enable != None:
            if args.users != None:
                cdc_status_solved=cdc_status(args.enable)
                dprint("cdc_status_solved=%s"%cdc_status_solved)
                json_file=cdc_status_solved[5]
                #if cdc_status_solved[0] true, the group is defined, else we have to defined it in modify directory.
                #cdc_status returs [solved,editable,alu,doc,adm,json_file]
                if cdc_status_solved[0]:
                    if cdc_status_solved[1]:
                        json_modify_solved=json_modify(json_file,args.users,True)
                        if json_modify_solved:
                            print('%s group has been enabled in %s users.'%(args.enable,args.users))
                            sys.exit(0)
                        else:
                            print('%s group was already enabled, sorry do nothing'%args.enable)
                            sys.exit(0)
                    else:
                        print ('Sorry do nothing because %s group is not editable.'%args.enable)
                        sys.exit(0)
                else:
                    print ('%s: This group is not in Lliurex Perm System integrated.'%args.enable)
                    sys.exit(0)
            else:
                print ("You don't have specified the users, alu or doc.")
                sys.exit(0)


        if args.disable != None:
            if args.users != None:
                cdc_status_solved=cdc_status(args.disable)
                dprint("cdc_status_solved=%s"%cdc_status_solved)
                json_file=cdc_status_solved[5]
                #if cdc_status_solved[0] true, the group is defined, else we have to defined it in modify directory.
                #cdc_status returs [solved,editable,alu,doc,adm,json_file]
                if cdc_status_solved[0]:
                    if cdc_status_solved[1]:
                        json_modify_solved=json_modify(json_file,args.users,False)
                        if json_modify_solved:
                            print('%s group has been disabled in %s users.'%(args.disable,args.users))
                            sys.exit(0)
                        else:
                            print('%s group was already disabled, sorry do nothing'%args.disable)
                            sys.exit(0)
                    else:
                        print ('Sorry do nothing because %s group is not editable.'%args.disable)
                        sys.exit(0)
                else:
                    print ('%s: This group is not in Lliurex Perm System integrated.'%args.disable)
                    sys.exit(0)
            else:
                print ("You don't have specified the users, alu or doc.")
                sys.exit(0)


        if args.list:
            list_editable=[]
            solved=False
            for file in os.listdir(r'%s'%cdc_dir_orig):
                if file.endswith(".json"):
                    file_json=cdc_dir_modify+file
                    if not os.path.isfile(file_json):
                        file_json=cdc_dir_orig+file
                    with open(file_json, 'r+') as fjson:
                        data=json.load(fjson)
                    name=data['name']
                    editable=data['editable']
                    if editable:
                        list_editable.append(name)
                        solved=True
            if solved:
                print('Editable groups :%s'%list_editable)
                sys.exit(0)
            else:
                print("You don't have any editable group.")




    except Exception as e:
        print('[Main] Error %s'%e)
        sys.exit(1)
        
    sys.exit(0)

if __name__=="__main__":
    main()


